import java.util.ArrayList;
import java.util.Scanner;

abstract class Device {
    protected int deviceId;
    protected String brand;
    protected double price;

    public Device(int deviceId, String brand, double price) {
        this.deviceId = deviceId;
        this.brand = brand;
        this.price = price;
    }

    public abstract void displayDetails();
}

interface Discountable {
    void applyDiscount(double percentage);
    double finalPrice();
}

class Smartphone extends Device implements Discountable {
    private double discountedPrice;

    public Smartphone(int deviceId, String brand, double price) {
        super(deviceId, brand, price);
        this.discountedPrice = price; // initially same as original price
    }

    @Override
    public void applyDiscount(double percentage) {
        discountedPrice = price - (price * (percentage / 100));
        System.out.println("Discount applied. New price: " + discountedPrice);
    }

    @Override
    public double finalPrice() {
        return discountedPrice;
    }

    @Override
    public void displayDetails() {
        System.out.println("Device ID: " + deviceId);
        System.out.println("Brand: " + brand);
        System.out.println("Original Price: " + price);
        System.out.println("Final Price: " + discountedPrice);
    }
}

public class SmartDeviceStore {
    private static ArrayList<Smartphone> smartphones = new ArrayList<>();
    private static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n--- Smart Device Store Menu ---");
            System.out.println("1. Add Smartphone");
            System.out.println("2. Apply Discount");
            System.out.println("3. View Device Details");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    addSmartphone();
                    break;
                case 2:
                    applyDiscount();
                    break;
                case 3:
                    viewDetails();
                    break;
                case 4:
                    System.out.println("Exiting... Thank you!");
                    break;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 4);
    }

    private static void addSmartphone() {
        System.out.print("Enter Device ID: ");
        int id = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Brand: ");
        String brand = sc.nextLine();
        System.out.print("Enter Price: ");
        double price = sc.nextDouble();

        Smartphone phone = new Smartphone(id, brand, price);
        smartphones.add(phone);
        System.out.println("Smartphone added successfully!");
    }

    private static void applyDiscount() {
        if (smartphones.isEmpty()) {
            System.out.println("No smartphones available.");
            return;
        }
        System.out.print("Enter Device ID to apply discount: ");
        int id = sc.nextInt();
        Smartphone phone = findById(id);
        if (phone != null) {
            System.out.print("Enter discount percentage: ");
            double discount = sc.nextDouble();
            phone.applyDiscount(discount);
        } else {
            System.out.println("Device not found!");
        }
    }

    private static void viewDetails() {
        if (smartphones.isEmpty()) {
            System.out.println("No smartphones available.");
            return;
        }
        for (Smartphone phone : smartphones) {
            System.out.println("\n--- Smartphone Details ---");
            phone.displayDetails();
        }
    }

    private static Smartphone findById(int id) {
        for (Smartphone phone : smartphones) {
            if (phone.deviceId == id) {
                return phone;
            }
        }
        return null;
    }
}
